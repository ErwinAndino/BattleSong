{
  "version": 3,
  "sources": ["../../midi-file/lib/midi-parser.js", "../../midi-file/lib/midi-writer.js", "../../midi-file/index.js", "../../@tonejs/midi/src/BinarySearch.ts", "../../@tonejs/midi/src/Header.ts", "../../@tonejs/midi/src/ControlChange.ts", "../../@tonejs/midi/src/ControlChanges.ts", "../../@tonejs/midi/src/PitchBend.ts", "../../@tonejs/midi/src/InstrumentMaps.ts", "../../@tonejs/midi/src/Instrument.ts", "../../@tonejs/midi/src/Note.ts", "../../@tonejs/midi/src/Track.ts", "../../array-flatten/src/index.ts", "../../@tonejs/midi/src/Encode.ts", "../../@tonejs/midi/src/Midi.ts"],
  "sourcesContent": ["// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\r\n\r\nfunction parseMidi(data) {\r\n  var p = new Parser(data)\r\n\r\n  var headerChunk = p.readChunk()\r\n  if (headerChunk.id != 'MThd')\r\n    throw \"Bad MIDI file.  Expected 'MHdr', got: '\" + headerChunk.id + \"'\"\r\n  var header = parseHeader(headerChunk.data)\r\n\r\n  var tracks = []\r\n  for (var i=0; !p.eof() && i < header.numTracks; i++) {\r\n    var trackChunk = p.readChunk()\r\n    if (trackChunk.id != 'MTrk')\r\n      throw \"Bad MIDI file.  Expected 'MTrk', got: '\" + trackChunk.id + \"'\"\r\n    var track = parseTrack(trackChunk.data)\r\n    tracks.push(track)\r\n  }\r\n\r\n  return {\r\n    header: header,\r\n    tracks: tracks\r\n  }\r\n}\r\n\r\n\r\nfunction parseHeader(data) {\r\n  var p = new Parser(data)\r\n\r\n  var format = p.readUInt16()\r\n  var numTracks = p.readUInt16()\r\n\r\n  var result = {\r\n    format: format,\r\n    numTracks: numTracks\r\n  }\r\n\r\n  var timeDivision = p.readUInt16()\r\n  if (timeDivision & 0x8000) {\r\n    result.framesPerSecond = 0x100 - (timeDivision >> 8)\r\n    result.ticksPerFrame = timeDivision & 0xFF\r\n  } else {\r\n    result.ticksPerBeat = timeDivision\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nfunction parseTrack(data) {\r\n  var p = new Parser(data)\r\n\r\n  var events = []\r\n  while (!p.eof()) {\r\n    var event = readEvent()\r\n    events.push(event)\r\n  }\r\n\r\n  return events\r\n\r\n  var lastEventTypeByte = null\r\n\r\n  function readEvent() {\r\n    var event = {}\r\n    event.deltaTime = p.readVarInt()\r\n\r\n    var eventTypeByte = p.readUInt8()\r\n\r\n    if ((eventTypeByte & 0xf0) === 0xf0) {\r\n      // system / meta event\r\n      if (eventTypeByte === 0xff) {\r\n        // meta event\r\n        event.meta = true\r\n        var metatypeByte = p.readUInt8()\r\n        var length = p.readVarInt()\r\n        switch (metatypeByte) {\r\n          case 0x00:\r\n            event.type = 'sequenceNumber'\r\n            if (length !== 2) throw \"Expected length for sequenceNumber event is 2, got \" + length\r\n            event.number = p.readUInt16()\r\n            return event\r\n          case 0x01:\r\n            event.type = 'text'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x02:\r\n            event.type = 'copyrightNotice'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x03:\r\n            event.type = 'trackName'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x04:\r\n            event.type = 'instrumentName'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x05:\r\n            event.type = 'lyrics'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x06:\r\n            event.type = 'marker'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x07:\r\n            event.type = 'cuePoint'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x20:\r\n            event.type = 'channelPrefix'\r\n            if (length != 1) throw \"Expected length for channelPrefix event is 1, got \" + length\r\n            event.channel = p.readUInt8()\r\n            return event\r\n          case 0x21:\r\n            event.type = 'portPrefix'\r\n            if (length != 1) throw \"Expected length for portPrefix event is 1, got \" + length\r\n            event.port = p.readUInt8()\r\n            return event\r\n          case 0x2f:\r\n            event.type = 'endOfTrack'\r\n            if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length\r\n            return event\r\n          case 0x51:\r\n            event.type = 'setTempo';\r\n            if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length\r\n            event.microsecondsPerBeat = p.readUInt24()\r\n            return event\r\n          case 0x54:\r\n            event.type = 'smpteOffset';\r\n            if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length\r\n            var hourByte = p.readUInt8()\r\n            var FRAME_RATES = { 0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30 }\r\n            event.frameRate = FRAME_RATES[hourByte & 0x60]\r\n            event.hour = hourByte & 0x1f\r\n            event.min = p.readUInt8()\r\n            event.sec = p.readUInt8()\r\n            event.frame = p.readUInt8()\r\n            event.subFrame = p.readUInt8()\r\n            return event\r\n          case 0x58:\r\n            event.type = 'timeSignature'\r\n            if (length != 2 && length != 4) throw \"Expected length for timeSignature event is 4 or 2, got \" + length\r\n            event.numerator = p.readUInt8()\r\n            event.denominator = (1 << p.readUInt8())\r\n            if (length === 4) {\r\n              event.metronome = p.readUInt8()\r\n              event.thirtyseconds = p.readUInt8()\r\n            } else {\r\n              event.metronome = 0x24\r\n              event.thirtyseconds = 0x08\r\n            }\r\n            return event\r\n          case 0x59:\r\n            event.type = 'keySignature'\r\n            if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length\r\n            event.key = p.readInt8()\r\n            event.scale = p.readUInt8()\r\n            return event\r\n          case 0x7f:\r\n            event.type = 'sequencerSpecific'\r\n            event.data = p.readBytes(length)\r\n            return event\r\n          default:\r\n            event.type = 'unknownMeta'\r\n            event.data = p.readBytes(length)\r\n            event.metatypeByte = metatypeByte\r\n            return event\r\n        }\r\n      } else if (eventTypeByte == 0xf0) {\r\n        event.type = 'sysEx'\r\n        var length = p.readVarInt()\r\n        event.data = p.readBytes(length)\r\n        return event\r\n      } else if (eventTypeByte == 0xf7) {\r\n        event.type = 'endSysEx'\r\n        var length = p.readVarInt()\r\n        event.data = p.readBytes(length)\r\n        return event\r\n      } else {\r\n        throw \"Unrecognised MIDI event type byte: \" + eventTypeByte\r\n      }\r\n    } else {\r\n      // channel event\r\n      var param1\r\n      if ((eventTypeByte & 0x80) === 0) {\r\n        // running status - reuse lastEventTypeByte as the event type.\r\n        // eventTypeByte is actually the first parameter\r\n        if (lastEventTypeByte === null)\r\n          throw \"Running status byte encountered before status byte\"\r\n        param1 = eventTypeByte\r\n        eventTypeByte = lastEventTypeByte\r\n        event.running = true\r\n      } else {\r\n        param1 = p.readUInt8()\r\n        lastEventTypeByte = eventTypeByte\r\n      }\r\n      var eventType = eventTypeByte >> 4\r\n      event.channel = eventTypeByte & 0x0f\r\n      switch (eventType) {\r\n        case 0x08:\r\n          event.type = 'noteOff'\r\n          event.noteNumber = param1\r\n          event.velocity = p.readUInt8()\r\n          return event\r\n        case 0x09:\r\n          var velocity = p.readUInt8()\r\n          event.type = velocity === 0 ? 'noteOff' : 'noteOn'\r\n          event.noteNumber = param1\r\n          event.velocity = velocity\r\n          if (velocity === 0) event.byte9 = true\r\n          return event\r\n        case 0x0a:\r\n          event.type = 'noteAftertouch'\r\n          event.noteNumber = param1\r\n          event.amount = p.readUInt8()\r\n          return event\r\n        case 0x0b:\r\n          event.type = 'controller'\r\n          event.controllerType = param1\r\n          event.value = p.readUInt8()\r\n          return event\r\n        case 0x0c:\r\n          event.type = 'programChange'\r\n          event.programNumber = param1\r\n          return event\r\n        case 0x0d:\r\n          event.type = 'channelAftertouch'\r\n          event.amount = param1\r\n          return event\r\n        case 0x0e:\r\n          event.type = 'pitchBend'\r\n          event.value = (param1 + (p.readUInt8() << 7)) - 0x2000\r\n          return event\r\n        default:\r\n          throw \"Unrecognised MIDI event type: \" + eventType\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction Parser(data) {\r\n  this.buffer = data\r\n  this.bufferLen = this.buffer.length\r\n  this.pos = 0\r\n}\r\n\r\nParser.prototype.eof = function() {\r\n  return this.pos >= this.bufferLen\r\n}\r\n\r\nParser.prototype.readUInt8 = function() {\r\n  var result = this.buffer[this.pos]\r\n  this.pos += 1\r\n  return result\r\n}\r\n\r\nParser.prototype.readInt8 = function() {\r\n  var u = this.readUInt8()\r\n  if (u & 0x80)\r\n    return u - 0x100\r\n  else\r\n    return u\r\n}\r\n\r\nParser.prototype.readUInt16 = function() {\r\n  var b0 = this.readUInt8(),\r\n      b1 = this.readUInt8()\r\n\r\n    return (b0 << 8) + b1\r\n}\r\n\r\nParser.prototype.readInt16 = function() {\r\n  var u = this.readUInt16()\r\n  if (u & 0x8000)\r\n    return u - 0x10000\r\n  else\r\n    return u\r\n}\r\n\r\nParser.prototype.readUInt24 = function() {\r\n  var b0 = this.readUInt8(),\r\n      b1 = this.readUInt8(),\r\n      b2 = this.readUInt8()\r\n\r\n    return (b0 << 16) + (b1 << 8) + b2\r\n}\r\n\r\nParser.prototype.readInt24 = function() {\r\n  var u = this.readUInt24()\r\n  if (u & 0x800000)\r\n    return u - 0x1000000\r\n  else\r\n    return u\r\n}\r\n\r\nParser.prototype.readUInt32 = function() {\r\n  var b0 = this.readUInt8(),\r\n      b1 = this.readUInt8(),\r\n      b2 = this.readUInt8(),\r\n      b3 = this.readUInt8()\r\n\r\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3\r\n}\r\n\r\nParser.prototype.readBytes = function(len) {\r\n  var bytes = this.buffer.slice(this.pos, this.pos + len)\r\n  this.pos += len\r\n  return bytes\r\n}\r\n\r\nParser.prototype.readString = function(len) {\r\n  var bytes = this.readBytes(len)\r\n  return String.fromCharCode.apply(null, bytes)\r\n}\r\n\r\nParser.prototype.readVarInt = function() {\r\n  var result = 0\r\n  while (!this.eof()) {\r\n    var b = this.readUInt8()\r\n    if (b & 0x80) {\r\n      result += (b & 0x7f)\r\n      result <<= 7\r\n    } else {\r\n      // b is last byte\r\n      return result + b\r\n    }\r\n  }\r\n  // premature eof\r\n  return result\r\n}\r\n\r\nParser.prototype.readChunk = function() {\r\n  var id = this.readString(4)\r\n  var length = this.readUInt32()\r\n  var data = this.readBytes(length)\r\n  return {\r\n    id: id,\r\n    length: length,\r\n    data: data\r\n  }\r\n}\r\n\r\nmodule.exports = parseMidi\r\n", "// data should be the same type of format returned by parseMidi\r\n// for maximum compatibililty, returns an array of byte values, suitable for conversion to Buffer, Uint8Array, etc.\r\n\r\n// opts:\r\n// - running              reuse previous eventTypeByte when possible, to compress file\r\n// - useByte9ForNoteOff   use 0x09 for noteOff when velocity is zero\r\n\r\nfunction writeMidi(data, opts) {\r\n  if (typeof data !== 'object')\r\n    throw 'Invalid MIDI data'\r\n\r\n  opts = opts || {}\r\n\r\n  var header = data.header || {}\r\n  var tracks = data.tracks || []\r\n  var i, len = tracks.length\r\n\r\n  var w = new Writer()\r\n  writeHeader(w, header, len)\r\n\r\n  for (i=0; i < len; i++) {\r\n    writeTrack(w, tracks[i], opts)\r\n  }\r\n\r\n  return w.buffer\r\n}\r\n\r\nfunction writeHeader(w, header, numTracks) {\r\n  var format = header.format == null ? 1 : header.format\r\n\r\n  var timeDivision = 128\r\n  if (header.timeDivision) {\r\n    timeDivision = header.timeDivision\r\n  } else if (header.ticksPerFrame && header.framesPerSecond) {\r\n    timeDivision = (-(header.framesPerSecond & 0xFF) << 8) | (header.ticksPerFrame & 0xFF)\r\n  } else if (header.ticksPerBeat) {\r\n    timeDivision = header.ticksPerBeat & 0x7FFF\r\n  }\r\n\r\n  var h = new Writer()\r\n  h.writeUInt16(format)\r\n  h.writeUInt16(numTracks)\r\n  h.writeUInt16(timeDivision)\r\n\r\n  w.writeChunk('MThd', h.buffer)\r\n}\r\n\r\nfunction writeTrack(w, track, opts) {\r\n  var t = new Writer()\r\n  var i, len = track.length\r\n  var eventTypeByte = null\r\n  for (i=0; i < len; i++) {\r\n    // Reuse last eventTypeByte when opts.running is set, or event.running is explicitly set on it.\r\n    // parseMidi will set event.running for each event, so that we can get an exact copy by default.\r\n    // Explicitly set opts.running to false, to override event.running and never reuse last eventTypeByte.\r\n    if (opts.running === false || !opts.running && !track[i].running) eventTypeByte = null\r\n\r\n    eventTypeByte = writeEvent(t, track[i], eventTypeByte, opts.useByte9ForNoteOff)\r\n  }\r\n  w.writeChunk('MTrk', t.buffer)\r\n}\r\n\r\nfunction writeEvent(w, event, lastEventTypeByte, useByte9ForNoteOff) {\r\n  var type = event.type\r\n  var deltaTime = event.deltaTime\r\n  var text = event.text || ''\r\n  var data = event.data || []\r\n  var eventTypeByte = null\r\n  w.writeVarInt(deltaTime)\r\n\r\n  switch (type) {\r\n    // meta events\r\n    case 'sequenceNumber':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x00)\r\n      w.writeVarInt(2)\r\n      w.writeUInt16(event.number)\r\n      break;\r\n\r\n    case 'text':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x01)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'copyrightNotice':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x02)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'trackName':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x03)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'instrumentName':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x04)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'lyrics':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x05)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'marker':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x06)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'cuePoint':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x07)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'channelPrefix':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x20)\r\n      w.writeVarInt(1)\r\n      w.writeUInt8(event.channel)\r\n      break;\r\n\r\n    case 'portPrefix':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x21)\r\n      w.writeVarInt(1)\r\n      w.writeUInt8(event.port)\r\n      break;\r\n\r\n    case 'endOfTrack':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x2F)\r\n      w.writeVarInt(0)\r\n      break;\r\n\r\n    case 'setTempo':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x51)\r\n      w.writeVarInt(3)\r\n      w.writeUInt24(event.microsecondsPerBeat)\r\n      break;\r\n\r\n    case 'smpteOffset':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x54)\r\n      w.writeVarInt(5)\r\n      var FRAME_RATES = { 24: 0x00, 25: 0x20, 29: 0x40, 30: 0x60 }\r\n      var hourByte = (event.hour & 0x1F) | FRAME_RATES[event.frameRate]\r\n      w.writeUInt8(hourByte)\r\n      w.writeUInt8(event.min)\r\n      w.writeUInt8(event.sec)\r\n      w.writeUInt8(event.frame)\r\n      w.writeUInt8(event.subFrame)\r\n      break;\r\n\r\n    case 'timeSignature':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x58)\r\n      w.writeVarInt(4)\r\n      w.writeUInt8(event.numerator)\r\n      var denominator = Math.floor((Math.log(event.denominator) / Math.LN2)) & 0xFF\r\n      w.writeUInt8(denominator)\r\n      w.writeUInt8(event.metronome)\r\n      w.writeUInt8(event.thirtyseconds || 8)\r\n      break;\r\n\r\n    case 'keySignature':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x59)\r\n      w.writeVarInt(2)\r\n      w.writeInt8(event.key)\r\n      w.writeUInt8(event.scale)\r\n      break;\r\n\r\n    case 'sequencerSpecific':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x7F)\r\n      w.writeVarInt(data.length)\r\n      w.writeBytes(data)\r\n      break;\r\n\r\n    case 'unknownMeta':\r\n      if (event.metatypeByte != null) {\r\n        w.writeUInt8(0xFF)\r\n        w.writeUInt8(event.metatypeByte)\r\n        w.writeVarInt(data.length)\r\n        w.writeBytes(data)\r\n      }\r\n      break;\r\n\r\n    // system-exclusive\r\n    case 'sysEx':\r\n      w.writeUInt8(0xF0)\r\n      w.writeVarInt(data.length)\r\n      w.writeBytes(data)\r\n      break;\r\n\r\n    case 'endSysEx':\r\n      w.writeUInt8(0xF7)\r\n      w.writeVarInt(data.length)\r\n      w.writeBytes(data)\r\n      break;\r\n\r\n    // channel events\r\n    case 'noteOff':\r\n      // Use 0x90 when opts.useByte9ForNoteOff is set and velocity is zero, or when event.byte9 is explicitly set on it.\r\n      // parseMidi will set event.byte9 for each event, so that we can get an exact copy by default.\r\n      // Explicitly set opts.useByte9ForNoteOff to false, to override event.byte9 and always use 0x80 for noteOff events.\r\n      var noteByte = ((useByte9ForNoteOff !== false && event.byte9) || (useByte9ForNoteOff && event.velocity == 0)) ? 0x90 : 0x80\r\n\r\n      eventTypeByte = noteByte | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.noteNumber)\r\n      w.writeUInt8(event.velocity)\r\n      break;\r\n\r\n    case 'noteOn':\r\n      eventTypeByte = 0x90 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.noteNumber)\r\n      w.writeUInt8(event.velocity)\r\n      break;\r\n\r\n    case 'noteAftertouch':\r\n      eventTypeByte = 0xA0 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.noteNumber)\r\n      w.writeUInt8(event.amount)\r\n      break;\r\n\r\n    case 'controller':\r\n      eventTypeByte = 0xB0 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.controllerType)\r\n      w.writeUInt8(event.value)\r\n      break;\r\n\r\n    case 'programChange':\r\n      eventTypeByte = 0xC0 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.programNumber)\r\n      break;\r\n\r\n    case 'channelAftertouch':\r\n      eventTypeByte = 0xD0 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.amount)\r\n      break;\r\n\r\n    case 'pitchBend':\r\n      eventTypeByte = 0xE0 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      var value14 = 0x2000 + event.value\r\n      var lsb14 = (value14 & 0x7F)\r\n      var msb14 = (value14 >> 7) & 0x7F\r\n      w.writeUInt8(lsb14)\r\n      w.writeUInt8(msb14)\r\n    break;\r\n\r\n    default:\r\n      throw 'Unrecognized event type: ' + type\r\n  }\r\n  return eventTypeByte\r\n}\r\n\r\n\r\nfunction Writer() {\r\n  this.buffer = []\r\n}\r\n\r\nWriter.prototype.writeUInt8 = function(v) {\r\n  this.buffer.push(v & 0xFF)\r\n}\r\nWriter.prototype.writeInt8 = Writer.prototype.writeUInt8\r\n\r\nWriter.prototype.writeUInt16 = function(v) {\r\n  var b0 = (v >> 8) & 0xFF,\r\n      b1 = v & 0xFF\r\n\r\n  this.writeUInt8(b0)\r\n  this.writeUInt8(b1)\r\n}\r\nWriter.prototype.writeInt16 = Writer.prototype.writeUInt16\r\n\r\nWriter.prototype.writeUInt24 = function(v) {\r\n  var b0 = (v >> 16) & 0xFF,\r\n      b1 = (v >> 8) & 0xFF,\r\n      b2 = v & 0xFF\r\n\r\n  this.writeUInt8(b0)\r\n  this.writeUInt8(b1)\r\n  this.writeUInt8(b2)\r\n}\r\nWriter.prototype.writeInt24 = Writer.prototype.writeUInt24\r\n\r\nWriter.prototype.writeUInt32 = function(v) {\r\n  var b0 = (v >> 24) & 0xFF,\r\n      b1 = (v >> 16) & 0xFF,\r\n      b2 = (v >> 8) & 0xFF,\r\n      b3 = v & 0xFF\r\n\r\n  this.writeUInt8(b0)\r\n  this.writeUInt8(b1)\r\n  this.writeUInt8(b2)\r\n  this.writeUInt8(b3)\r\n}\r\nWriter.prototype.writeInt32 = Writer.prototype.writeUInt32\r\n\r\n\r\nWriter.prototype.writeBytes = function(arr) {\r\n  this.buffer = this.buffer.concat(Array.prototype.slice.call(arr, 0))\r\n}\r\n\r\nWriter.prototype.writeString = function(str) {\r\n  var i, len = str.length, arr = []\r\n  for (i=0; i < len; i++) {\r\n    arr.push(str.codePointAt(i))\r\n  }\r\n  this.writeBytes(arr)\r\n}\r\n\r\nWriter.prototype.writeVarInt = function(v) {\r\n  if (v < 0) throw \"Cannot write negative variable-length integer\"\r\n\r\n  if (v <= 0x7F) {\r\n    this.writeUInt8(v)\r\n  } else {\r\n    var i = v\r\n    var bytes = []\r\n    bytes.push(i & 0x7F)\r\n    i >>= 7\r\n    while (i) {\r\n      var b = i & 0x7F | 0x80\r\n      bytes.push(b)\r\n      i >>= 7\r\n    }\r\n    this.writeBytes(bytes.reverse())\r\n  }\r\n}\r\n\r\nWriter.prototype.writeChunk = function(id, data) {\r\n  this.writeString(id)\r\n  this.writeUInt32(data.length)\r\n  this.writeBytes(data)\r\n}\r\n\r\nmodule.exports = writeMidi\r\n", "exports.parseMidi = require('./lib/midi-parser')\r\nexports.writeMidi = require('./lib/midi-writer')\r\n", "/**\r\n * Return the index of the element at or before the given property\r\n * @hidden\r\n */\r\nexport function search(array: any[], value: any, prop = \"ticks\"): number {\r\n\tlet beginning = 0;\r\n\tconst len = array.length;\r\n\tlet end = len;\r\n\tif (len > 0 && array[len - 1][prop] <= value) {\r\n\t\treturn len - 1;\r\n\t}\r\n\twhile (beginning < end) {\r\n\t\t// calculate the midpoint for roughly equal partition\r\n\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\r\n\t\tconst event = array[midPoint];\r\n\t\tconst nextEvent = array[midPoint + 1];\r\n\t\tif (event[prop] === value) {\r\n\t\t\t// choose the last one that has the same value\r\n\t\t\tfor (let i = midPoint; i < array.length; i++) {\r\n\t\t\t\tconst testEvent = array[i];\r\n\t\t\t\tif (testEvent[prop] === value) {\r\n\t\t\t\t\tmidPoint = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn midPoint;\r\n\t\t} else if (event[prop] < value && nextEvent[prop] > value) {\r\n\t\t\treturn midPoint;\r\n\t\t} else if (event[prop] > value) {\r\n\t\t\t// search lower\r\n\t\t\tend = midPoint;\r\n\t\t} else if (event[prop] < value) {\r\n\t\t\t// search upper\r\n\t\t\tbeginning = midPoint + 1;\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Does a binary search to insert the note\r\n * in the correct spot in the array\r\n * @hidden\r\n */\r\nexport function insert(array: any[], event: object, prop = \"ticks\"): void {\r\n\tif (array.length) {\r\n\t\tconst index = search(array, event[prop], prop);\r\n\t\tarray.splice(index + 1, 0, event);\r\n\t} else {\r\n\t\tarray.push(event);\r\n\t}\r\n}\r\n", "import type { MidiData, MidiEvent } from \"midi-file\";\r\nimport { search } from \"./BinarySearch\";\r\n\r\nconst privatePPQMap = new WeakMap<Header, number>();\r\n\r\nexport interface TempoEvent {\r\n\tticks: number;\r\n\tbpm: number;\r\n\ttime?: number;\r\n}\r\n\r\nexport interface TimeSignatureEvent {\r\n\tticks: number;\r\n\ttimeSignature: number[];\r\n\tmeasures?: number;\r\n}\r\n\r\nexport interface MetaEvent {\r\n\ttext: string;\r\n\ttype: string;\r\n\tticks: number;\r\n}\r\n\r\nexport interface KeySignatureEvent {\r\n\tticks: number;\r\n\tkey: string;\r\n\tscale: string;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport const keySignatureKeys = [\r\n\t\"Cb\",\r\n\t\"Gb\",\r\n\t\"Db\",\r\n\t\"Ab\",\r\n\t\"Eb\",\r\n\t\"Bb\",\r\n\t\"F\",\r\n\t\"C\",\r\n\t\"G\",\r\n\t\"D\",\r\n\t\"A\",\r\n\t\"E\",\r\n\t\"B\",\r\n\t\"F#\",\r\n\t\"C#\",\r\n];\r\n\r\n/**\r\n * The parsed MIDI file header.\r\n */\r\nexport class Header {\r\n\t/**\r\n\t * The array of all the tempo events.\r\n\t */\r\n\ttempos: TempoEvent[] = [];\r\n\r\n\t/**\r\n\t * The time signatures.\r\n\t */\r\n\ttimeSignatures: TimeSignatureEvent[] = [];\r\n\r\n\t/**\r\n\t * The time signatures.\r\n\t */\r\n\tkeySignatures: KeySignatureEvent[] = [];\r\n\r\n\t/**\r\n\t * Additional meta events.\r\n\t */\r\n\tmeta: MetaEvent[] = [];\r\n\r\n\t/**\r\n\t * The name of the MIDI file;\r\n\t */\r\n\tname = \"\";\r\n\r\n\tconstructor(midiData?: MidiData) {\r\n\t\t// Look through all the tracks for tempo changes.\r\n\t\tprivatePPQMap.set(this, 480);\r\n\r\n\t\tif (midiData) {\r\n\t\t\tprivatePPQMap.set(this, midiData.header.ticksPerBeat);\r\n\t\t\t\r\n\t\t\t// Check time signature and tempo events from all of the tracks.\r\n\t\t\tmidiData.tracks.forEach(track => {\r\n\t\t\t\ttrack.forEach((event: MidiEvent & { absoluteTime: number; meta?: boolean; }) => {\r\n\t\t\t\t\tif (event.meta) {\r\n\t\t\t\t\t\tif (event.type === \"timeSignature\") {\r\n\t\t\t\t\t\t\tthis.timeSignatures.push({\r\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\r\n\t\t\t\t\t\t\t\ttimeSignature: [\r\n\t\t\t\t\t\t\t\t\tevent.numerator,\r\n\t\t\t\t\t\t\t\t\tevent.denominator,\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else if (event.type === \"setTempo\") {\r\n\t\t\t\t\t\t\tthis.tempos.push({\r\n\t\t\t\t\t\t\t\tbpm: 60000000 / event.microsecondsPerBeat,\r\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else if (event.type === \"keySignature\") {\r\n\t\t\t\t\t\t\tthis.keySignatures.push({\r\n\t\t\t\t\t\t\t\tkey: keySignatureKeys[event.key + 7],\r\n\t\t\t\t\t\t\t\tscale: event.scale === 0 ? \"major\" : \"minor\",\r\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\t// Check the first track for other relevant data.\r\n\t\t\tlet firstTrackCurrentTicks = 0; // Used for absolute times.\r\n\t\t\tmidiData.tracks[0].forEach((event: MidiEvent & { meta?: boolean; }) => {\r\n\t\t\t\tfirstTrackCurrentTicks += event.deltaTime;\r\n\r\n\t\t\t\tif (event.meta) {\r\n\t\t\t\t\tif (event.type === \"trackName\") {\r\n\t\t\t\t\t\tthis.name = event.text;\r\n\t\t\t\t\t} else if (\r\n\t\t\t\t\t\tevent.type === \"text\" ||\r\n\t\t\t\t\t\tevent.type === \"cuePoint\" ||\r\n\t\t\t\t\t\tevent.type === \"marker\" ||\r\n\t\t\t\t\t\tevent.type === \"lyrics\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tthis.meta.push({\r\n\t\t\t\t\t\t\ttext: event.text,\r\n\t\t\t\t\t\t\tticks: firstTrackCurrentTicks,\r\n\t\t\t\t\t\t\ttype: event.type,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.update();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This must be invoked after any changes are made to the tempo array\r\n\t * or the timeSignature array for the updated values to be reflected.\r\n\t */\r\n\tupdate(): void {\r\n\t\tlet currentTime = 0;\r\n\t\tlet lastEventBeats = 0;\r\n\r\n\t\t// Make sure it's sorted;\r\n\t\tthis.tempos.sort((a, b) => a.ticks - b.ticks);\r\n\t\tthis.tempos.forEach((event, index) => {\r\n\t\t\tconst lastBPM =\r\n\t\t\t\tindex > 0 ? this.tempos[index - 1].bpm : this.tempos[0].bpm;\r\n\t\t\tconst beats = event.ticks / this.ppq - lastEventBeats;\r\n\t\t\tconst elapsedSeconds = (60 / lastBPM) * beats;\r\n\r\n\t\t\tevent.time = elapsedSeconds + currentTime;\r\n\t\t\tcurrentTime = event.time;\r\n\t\t\tlastEventBeats += beats;\r\n\t\t});\r\n\r\n\t\tthis.timeSignatures.sort((a, b) => a.ticks - b.ticks);\r\n\t\tthis.timeSignatures.forEach((event, index) => {\r\n\t\t\tconst lastEvent =\r\n\t\t\t\tindex > 0\r\n\t\t\t\t\t? this.timeSignatures[index - 1]\r\n\t\t\t\t\t: this.timeSignatures[0];\r\n\r\n\t\t\tconst elapsedBeats = (event.ticks - lastEvent.ticks) / this.ppq;\r\n\t\t\tconst elapsedMeasures =\r\n\t\t\t\telapsedBeats /\r\n\t\t\t\tlastEvent.timeSignature[0] /\r\n\t\t\t\t(lastEvent.timeSignature[1] / 4);\r\n\r\n\t\t\tlastEvent.measures = lastEvent.measures || 0;\r\n\t\t\tevent.measures = elapsedMeasures + lastEvent.measures;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Convert ticks into seconds based on the tempo changes.\r\n\t */\r\n\tticksToSeconds(ticks: number): number {\r\n\t\t// Find the relevant position.\r\n\t\tconst index = search(this.tempos, ticks);\r\n\r\n\t\tif (index !== -1) {\r\n\t\t\tconst tempo = this.tempos[index];\r\n\t\t\tconst tempoTime = tempo.time;\r\n\t\t\tconst elapsedBeats = (ticks - tempo.ticks) / this.ppq;\r\n\r\n\t\t\treturn tempoTime + (60 / tempo.bpm) * elapsedBeats;\r\n\t\t} else {\r\n\t\t\t// Assume 120.\r\n\t\t\tconst beats = ticks / this.ppq;\r\n\t\t\treturn (60 / 120) * beats;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Convert ticks into measures based off of the time signatures.\r\n\t */\r\n\tticksToMeasures(ticks: number): number {\r\n\t\tconst index = search(this.timeSignatures, ticks);\r\n\r\n\t\tif (index !== -1) {\r\n\t\t\tconst timeSigEvent = this.timeSignatures[index];\r\n\t\t\tconst elapsedBeats = (ticks - timeSigEvent.ticks) / this.ppq;\r\n\r\n\t\t\treturn (\r\n\t\t\t\ttimeSigEvent.measures +\r\n\t\t\t\telapsedBeats /\r\n\t\t\t\t\t(timeSigEvent.timeSignature[0] /\r\n\t\t\t\t\t\ttimeSigEvent.timeSignature[1]) /\r\n\t\t\t\t\t4\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn ticks / this.ppq / 4;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The number of ticks per quarter note.\r\n\t */\r\n\tget ppq(): number {\r\n\t\treturn privatePPQMap.get(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Convert seconds to ticks based on the tempo events.\r\n\t */\r\n\tsecondsToTicks(seconds: number): number {\r\n\t\t// Find the relevant position.\r\n\t\tconst index = search(this.tempos, seconds, \"time\");\r\n\r\n\t\tif (index !== -1) {\r\n\t\t\tconst tempo = this.tempos[index];\r\n\t\t\tconst tempoTime = tempo.time;\r\n\t\t\tconst elapsedTime = seconds - tempoTime;\r\n\t\t\tconst elapsedBeats = elapsedTime / (60 / tempo.bpm);\r\n\r\n\t\t\treturn Math.round(tempo.ticks + elapsedBeats * this.ppq);\r\n\t\t} else {\r\n\t\t\t// Assume 120.\r\n\t\t\tconst beats = seconds / (60 / 120);\r\n\t\t\treturn Math.round(beats * this.ppq);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Convert the header into an object.\r\n\t */\r\n\ttoJSON(): HeaderJSON {\r\n\t\treturn {\r\n\t\t\tkeySignatures: this.keySignatures,\r\n\t\t\tmeta: this.meta,\r\n\t\t\tname: this.name,\r\n\t\t\tppq: this.ppq,\r\n\t\t\ttempos: this.tempos.map((t) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tbpm: t.bpm,\r\n\t\t\t\t\tticks: t.ticks,\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t\ttimeSignatures: this.timeSignatures,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Parse a header json object.\r\n\t */\r\n\tfromJSON(json: HeaderJSON): void {\r\n\t\tthis.name = json.name;\r\n\t\t\r\n\t\t// Clone all the attributes.\r\n\t\tthis.tempos = json.tempos.map((t) => Object.assign({}, t));\r\n\t\tthis.timeSignatures = json.timeSignatures.map((t) =>\r\n\t\t\tObject.assign({}, t)\r\n\t\t);\r\n\t\tthis.keySignatures = json.keySignatures.map((t) =>\r\n\t\t\tObject.assign({}, t)\r\n\t\t);\r\n\t\tthis.meta = json.meta.map((t) => Object.assign({}, t));\r\n\r\n\t\tprivatePPQMap.set(this, json.ppq);\r\n\t\tthis.update();\r\n\t}\r\n\r\n\t/**\r\n\t * Update the tempo of the midi to a single tempo. Will remove and replace\r\n\t * any other tempos currently set and update all of the event timing.\r\n\t * @param bpm The tempo in beats per second.\r\n\t */\r\n\tsetTempo(bpm: number): void {\r\n\t\tthis.tempos = [\r\n\t\t\t{\r\n\t\t\t\tbpm,\r\n\t\t\t\tticks: 0,\r\n\t\t\t},\r\n\t\t];\r\n\t\tthis.update();\r\n\t}\r\n}\r\n\r\nexport interface HeaderJSON {\r\n\tname: string;\r\n\tppq: number;\r\n\tmeta: MetaEvent[];\r\n\ttempos: TempoEvent[];\r\n\ttimeSignatures: TimeSignatureEvent[];\r\n\tkeySignatures: KeySignatureEvent[];\r\n}\r\n", "import type { MidiControllerEvent } from \"midi-file\";\r\nimport { Header } from \"./Header\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport type ControlChangeName =\r\n\t| \"modulationWheel\"\r\n\t| \"breath\"\r\n\t| \"footController\"\r\n\t| \"portamentoTime\"\r\n\t| \"volume\"\r\n\t| \"balance\"\r\n\t| \"pan\"\r\n\t| \"sustain\"\r\n\t| \"portamentoTime\"\r\n\t| \"sostenuto\"\r\n\t| \"softPedal\"\r\n\t| \"legatoFootswitch\"\r\n\t| \"portamentoControl\";\r\n\r\ninterface ControlChangeMap {\r\n\t[key: number]: ControlChangeName;\r\n}\r\n/**\r\n * A map of values to control change names\r\n * @hidden\r\n */\r\nexport const controlChangeNames: ControlChangeMap = {\r\n\t1: \"modulationWheel\",\r\n\t2: \"breath\",\r\n\t4: \"footController\",\r\n\t5: \"portamentoTime\",\r\n\t7: \"volume\",\r\n\t8: \"balance\",\r\n\t10: \"pan\",\r\n\t64: \"sustain\",\r\n\t65: \"portamentoTime\",\r\n\t66: \"sostenuto\",\r\n\t67: \"softPedal\",\r\n\t68: \"legatoFootswitch\",\r\n\t84: \"portamentoControl\",\r\n};\r\n\r\n/**\r\n * swap the keys and values\r\n * @hidden\r\n */\r\nexport const controlChangeIds = Object.keys(controlChangeNames).reduce((obj, key) => {\r\n\tobj[controlChangeNames[key]] = key;\r\n\treturn obj;\r\n}, {});\r\n\r\nconst privateHeaderMap = new WeakMap<ControlChange, Header>();\r\nconst privateCCNumberMap = new WeakMap<ControlChange, number>();\r\n\r\n/**\r\n * Represents a control change event\r\n */\r\nexport class ControlChange implements ControlChangeInterface {\r\n\r\n\t/**\r\n\t * The number value of the event\r\n\t */\r\n\tvalue: number;\r\n\r\n\t/**\r\n\t * The tick time of the event\r\n\t */\r\n\tticks: number;\r\n\r\n\t/**\r\n\t * @param event\r\n\t * @param header\r\n\t */\r\n\tconstructor(event: Partial<MidiControllerEvent & { absoluteTime: number }>, header: Header) {\r\n\t\tprivateHeaderMap.set(this, header);\r\n\t\tprivateCCNumberMap.set(this, event.controllerType);\r\n\r\n\t\tthis.ticks = event.absoluteTime;\r\n\t\tthis.value = event.value;\r\n\t}\r\n\r\n\t/**\r\n\t * The controller number\r\n\t */\r\n\tget number(): number {\r\n\t\treturn privateCCNumberMap.get(this);\r\n\t}\r\n\r\n\t/**\r\n\t * return the common name of the control number if it exists\r\n\t */\r\n\tget name(): ControlChangeName {\r\n\t\tif (controlChangeNames[this.number]) {\r\n\t\t\treturn controlChangeNames[this.number];\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The time of the event in seconds\r\n\t */\r\n\tget time(): number {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\treturn header.ticksToSeconds(this.ticks);\r\n\t}\r\n\r\n\tset time(t: number) {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\tthis.ticks = header.secondsToTicks(t);\r\n\t}\r\n\r\n\ttoJSON(): ControlChangeJSON {\r\n\t\treturn {\r\n\t\t\tnumber: this.number,\r\n\t\t\tticks: this.ticks,\r\n\t\t\ttime: this.time,\r\n\t\t\tvalue: this.value,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport interface ControlChangeJSON {\r\n\tnumber: number;\r\n\tticks: number;\r\n\ttime: number;\r\n\tvalue: number;\r\n}\r\n\r\nexport interface ControlChangeInterface {\r\n\tnumber: number;\r\n\tticks: number;\r\n\ttime: number;\r\n\tvalue: number;\r\n}\r\n", "import { controlChangeIds } from \"./ControlChange\";\r\nimport { ControlChange, ControlChangeJSON } from \"./ControlChange\";\r\n\r\nexport interface ControlChanges {\r\n\t[key: string]: ControlChange[];\r\n\t[key: number]: ControlChange[];\r\n}\r\n\r\nexport interface ControlChangesJSON {\r\n\t[key: string]: ControlChangeJSON[];\r\n\t[key: number]: ControlChangeJSON[];\r\n}\r\n\r\n/**\r\n * Automatically creates an alias for named control values using Proxies\r\n * @hidden\r\n */\r\nexport function createControlChanges(): ControlChanges {\r\n\treturn new Proxy({}, {\r\n\t\t// tslint:disable-next-line: typedef\r\n\t\tget(target, handler) {\r\n\t\t\tif (target[handler]) {\r\n\t\t\t\treturn target[handler];\r\n\t\t\t} else if (controlChangeIds.hasOwnProperty(handler)) {\r\n\t\t\t\treturn target[controlChangeIds[handler]];\r\n\t\t\t}\r\n\t\t},\r\n\t\t// tslint:disable-next-line: typedef\r\n\t\tset(target, handler, value) {\r\n\t\t\tif (controlChangeIds.hasOwnProperty(handler)) {\r\n\t\t\t\ttarget[controlChangeIds[handler]] = value;\r\n\t\t\t} else {\r\n\t\t\t\ttarget[handler] = value;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t});\r\n}\r\n", "import { Header } from \"./Header\";\r\nimport { MidiPitchBendEvent } from \"midi-file\";\r\n\r\nconst privateHeaderMap = new WeakMap<PitchBend, Header>();\r\n\r\n/**\r\n * Represents a pitch bend event.\r\n */\r\nexport class PitchBend implements PitchBendInterface {\r\n\r\n\t/**\r\n\t * The pitch value from...\r\n\t */\r\n\tvalue: number;\r\n\r\n\t/**\r\n\t * The tick time of the event.\r\n\t */\r\n\tticks: number;\r\n\r\n\t/**\r\n\t * @param event\r\n\t * @param header\r\n\t */\r\n\tconstructor(event: Partial<MidiPitchBendEvent & { absoluteTime: number; }>, header: Header) {\r\n\t\tprivateHeaderMap.set(this, header);\r\n\r\n\t\tthis.ticks = event.absoluteTime;\r\n\t\tthis.value = event.value;\r\n\t}\r\n\r\n\t/**\r\n\t * The time of the event in seconds\r\n\t */\r\n\tget time(): number {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\treturn header.ticksToSeconds(this.ticks);\r\n\t}\r\n\r\n\tset time(t: number) {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\tthis.ticks = header.secondsToTicks(t);\r\n\t}\r\n\r\n\ttoJSON(): PitchBendJSON {\r\n\t\treturn {\r\n\t\t\tticks: this.ticks,\r\n\t\t\ttime: this.time,\r\n\t\t\tvalue: this.value,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport interface PitchBendJSON {\r\n\tticks: number;\r\n\ttime: number;\r\n\tvalue: number;\r\n}\r\n\r\nexport interface PitchBendInterface {\r\n\tticks: number;\r\n\ttime: number;\r\n\tvalue: number;\r\n}\r\n", "export const instrumentByPatchID = [\r\n\t\"acoustic grand piano\",\r\n\t\"bright acoustic piano\",\r\n\t\"electric grand piano\",\r\n\t\"honky-tonk piano\",\r\n\t\"electric piano 1\",\r\n\t\"electric piano 2\",\r\n\t\"harpsichord\",\r\n\t\"clavi\",\r\n\t\"celesta\",\r\n\t\"glockenspiel\",\r\n\t\"music box\",\r\n\t\"vibraphone\",\r\n\t\"marimba\",\r\n\t\"xylophone\",\r\n\t\"tubular bells\",\r\n\t\"dulcimer\",\r\n\t\"drawbar organ\",\r\n\t\"percussive organ\",\r\n\t\"rock organ\",\r\n\t\"church organ\",\r\n\t\"reed organ\",\r\n\t\"accordion\",\r\n\t\"harmonica\",\r\n\t\"tango accordion\",\r\n\t\"acoustic guitar (nylon)\",\r\n\t\"acoustic guitar (steel)\",\r\n\t\"electric guitar (jazz)\",\r\n\t\"electric guitar (clean)\",\r\n\t\"electric guitar (muted)\",\r\n\t\"overdriven guitar\",\r\n\t\"distortion guitar\",\r\n\t\"guitar harmonics\",\r\n\t\"acoustic bass\",\r\n\t\"electric bass (finger)\",\r\n\t\"electric bass (pick)\",\r\n\t\"fretless bass\",\r\n\t\"slap bass 1\",\r\n\t\"slap bass 2\",\r\n\t\"synth bass 1\",\r\n\t\"synth bass 2\",\r\n\t\"violin\",\r\n\t\"viola\",\r\n\t\"cello\",\r\n\t\"contrabass\",\r\n\t\"tremolo strings\",\r\n\t\"pizzicato strings\",\r\n\t\"orchestral harp\",\r\n\t\"timpani\",\r\n\t\"string ensemble 1\",\r\n\t\"string ensemble 2\",\r\n\t\"synthstrings 1\",\r\n\t\"synthstrings 2\",\r\n\t\"choir aahs\",\r\n\t\"voice oohs\",\r\n\t\"synth voice\",\r\n\t\"orchestra hit\",\r\n\t\"trumpet\",\r\n\t\"trombone\",\r\n\t\"tuba\",\r\n\t\"muted trumpet\",\r\n\t\"french horn\",\r\n\t\"brass section\",\r\n\t\"synthbrass 1\",\r\n\t\"synthbrass 2\",\r\n\t\"soprano sax\",\r\n\t\"alto sax\",\r\n\t\"tenor sax\",\r\n\t\"baritone sax\",\r\n\t\"oboe\",\r\n\t\"english horn\",\r\n\t\"bassoon\",\r\n\t\"clarinet\",\r\n\t\"piccolo\",\r\n\t\"flute\",\r\n\t\"recorder\",\r\n\t\"pan flute\",\r\n\t\"blown bottle\",\r\n\t\"shakuhachi\",\r\n\t\"whistle\",\r\n\t\"ocarina\",\r\n\t\"lead 1 (square)\",\r\n\t\"lead 2 (sawtooth)\",\r\n\t\"lead 3 (calliope)\",\r\n\t\"lead 4 (chiff)\",\r\n\t\"lead 5 (charang)\",\r\n\t\"lead 6 (voice)\",\r\n\t\"lead 7 (fifths)\",\r\n\t\"lead 8 (bass + lead)\",\r\n\t\"pad 1 (new age)\",\r\n\t\"pad 2 (warm)\",\r\n\t\"pad 3 (polysynth)\",\r\n\t\"pad 4 (choir)\",\r\n\t\"pad 5 (bowed)\",\r\n\t\"pad 6 (metallic)\",\r\n\t\"pad 7 (halo)\",\r\n\t\"pad 8 (sweep)\",\r\n\t\"fx 1 (rain)\",\r\n\t\"fx 2 (soundtrack)\",\r\n\t\"fx 3 (crystal)\",\r\n\t\"fx 4 (atmosphere)\",\r\n\t\"fx 5 (brightness)\",\r\n\t\"fx 6 (goblins)\",\r\n\t\"fx 7 (echoes)\",\r\n\t\"fx 8 (sci-fi)\",\r\n\t\"sitar\",\r\n\t\"banjo\",\r\n\t\"shamisen\",\r\n\t\"koto\",\r\n\t\"kalimba\",\r\n\t\"bag pipe\",\r\n\t\"fiddle\",\r\n\t\"shanai\",\r\n\t\"tinkle bell\",\r\n\t\"agogo\",\r\n\t\"steel drums\",\r\n\t\"woodblock\",\r\n\t\"taiko drum\",\r\n\t\"melodic tom\",\r\n\t\"synth drum\",\r\n\t\"reverse cymbal\",\r\n\t\"guitar fret noise\",\r\n\t\"breath noise\",\r\n\t\"seashore\",\r\n\t\"bird tweet\",\r\n\t\"telephone ring\",\r\n\t\"helicopter\",\r\n\t\"applause\",\r\n\t\"gunshot\",\r\n];\r\n\r\nexport const InstrumentFamilyByID = [\r\n\t\"piano\",\r\n\t\"chromatic percussion\",\r\n\t\"organ\",\r\n\t\"guitar\",\r\n\t\"bass\",\r\n\t\"strings\",\r\n\t\"ensemble\",\r\n\t\"brass\",\r\n\t\"reed\",\r\n\t\"pipe\",\r\n\t\"synth lead\",\r\n\t\"synth pad\",\r\n\t\"synth effects\",\r\n\t\"world\",\r\n\t\"percussive\",\r\n\t\"sound effects\",\r\n];\r\n\r\nexport const DrumKitByPatchID = {\r\n\t0: \"standard kit\",\r\n\t8: \"room kit\",\r\n\t16: \"power kit\",\r\n\t24: \"electronic kit\",\r\n\t25: \"tr-808 kit\",\r\n\t32: \"jazz kit\",\r\n\t40: \"brush kit\",\r\n\t48: \"orchestra kit\",\r\n\t56: \"sound fx kit\",\r\n};\r\n", "import type {\r\n\tMidiEvent,\r\n\tMidiProgramChangeEvent\r\n} from \"midi-file\";\r\n\r\nimport { DrumKitByPatchID, instrumentByPatchID, InstrumentFamilyByID } from \"./InstrumentMaps\";\r\nimport { Track } from \"./Track\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nconst privateTrackMap = new WeakMap<Instrument, Track>();\r\n\r\n/**\r\n * Describes the MIDI instrument of a track.\r\n */\r\nexport class Instrument {\r\n\r\n\t/**\r\n\t * The instrument number. Defaults to 0.\r\n\t */\r\n\tnumber = 0;\r\n\r\n\t/**\r\n\t * @param trackData\r\n\t * @param track \r\n\t */\r\n\tconstructor(trackData: MidiEvent[], track: Track) {\r\n\t\tprivateTrackMap.set(this, track);\r\n\t\tthis.number = 0;\r\n\r\n\t\tif (trackData) {\r\n\t\t\tconst programChange = trackData.find(\r\n\t\t\t\te => e.type === \"programChange\"\r\n\t\t\t) as MidiProgramChangeEvent;\r\n\r\n\t\t\t// Set 'number' from 'programNumber' if exists.\r\n\t\t\tif (programChange) {\r\n\t\t\t\tthis.number = programChange.programNumber;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The common name of the instrument.\r\n\t */\r\n\tget name(): string {\r\n\t\tif (this.percussion) {\r\n\t\t\treturn DrumKitByPatchID[this.number];\r\n\t\t} else {\r\n\t\t\treturn instrumentByPatchID[this.number];\r\n\t\t}\r\n\t}\r\n\r\n\tset name(n: string) {\r\n\t\tconst patchNumber = instrumentByPatchID.indexOf(n);\r\n\t\tif (patchNumber !== -1) {\r\n\t\t\tthis.number = patchNumber;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The instrument family, e.g. \"piano\".\r\n\t */\r\n\tget family(): string {\r\n\t\tif (this.percussion) {\r\n\t\t\treturn \"drums\";\r\n\t\t} else {\r\n\t\t\treturn InstrumentFamilyByID[Math.floor(this.number / 8)];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If the instrument is a percussion instrument.\r\n\t */\r\n\tget percussion(): boolean {\r\n\t\tconst track = privateTrackMap.get(this);\r\n\t\treturn track.channel === 9;\r\n\t}\r\n\r\n\t/**\r\n\t * Convert it to JSON form.\r\n\t */\r\n\ttoJSON(): InstrumentJSON {\r\n\t\treturn {\r\n\t\t\tfamily: this.family,\r\n\t\t\tnumber: this.number,\r\n\t\t\tname: this.name\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Convert from JSON form.\r\n\t */\r\n\tfromJSON(json: InstrumentJSON): void {\r\n\t\tthis.number = json.number;\r\n\t}\r\n}\r\n\r\nexport interface InstrumentJSON {\r\n\tfamily: string;\r\n\tnumber: number;\r\n\tname: string;\r\n}\r\n", "import { Header } from \"./Header\";\r\n\r\n/**\r\n * Convert a MIDI note into a pitch.\r\n */\r\nfunction midiToPitch(midi: number): string {\r\n\tconst octave = Math.floor(midi / 12) - 1;\r\n\treturn midiToPitchClass(midi) + octave.toString();\r\n}\r\n\r\n/**\r\n * Convert a MIDI note to a pitch class (just the pitch no octave).\r\n */\r\nfunction midiToPitchClass(midi: number): string {\r\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\r\n\tconst note = midi % 12;\r\n\treturn scaleIndexToNote[note];\r\n}\r\n\r\n/**\r\n * Convert a pitch class to a MIDI note.\r\n */\r\nfunction pitchClassToMidi(pitch: string): number {\r\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\r\n\treturn scaleIndexToNote.indexOf(pitch);\r\n}\r\n\r\n/**\r\n * Convert a pitch to a MIDI number.\r\n */\r\n// tslint:disable-next-line: only-arrow-functions typedef\r\nconst pitchToMidi: (note: string) => number = (function() {\r\n\tconst regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\r\n\tconst noteToScaleIndex = {\r\n\t\t// tslint:disable-next-line: object-literal-sort-keys\r\n\t\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\r\n\t\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\r\n\t\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\r\n\t\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\r\n\t\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\r\n\t\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\r\n\t\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\r\n\t};\r\n\r\n\treturn (note) => {\r\n\t\tconst split = regexp.exec(note);\r\n\t\tconst pitch = split[1];\r\n\t\tconst octave = split[2];\r\n\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\r\n\t\treturn index + (parseInt(octave, 10) + 1) * 12;\r\n\t};\r\n}());\r\n\r\nconst privateHeaderMap = new WeakMap<Note, Header>();\r\n\r\n/**\r\n * A Note consists of a `noteOn` and `noteOff` event.\r\n */\r\nexport class Note implements NoteInterface {\r\n\r\n\t/**\r\n\t * The notes MIDI value.\r\n\t */\r\n\tmidi: number;\r\n\r\n\t/**\r\n\t * The normalized velocity (0-1).\r\n\t */\r\n\tvelocity: number;\r\n\r\n\t/**\r\n\t * The velocity of the note off.\r\n\t */\r\n\tnoteOffVelocity: number;\r\n\r\n\t/**\r\n\t * The start time in ticks.\r\n\t */\r\n\tticks: number;\r\n\r\n\t/**\r\n\t * The duration in ticks.\r\n\t */\r\n\tdurationTicks: number;\r\n\r\n\tconstructor(noteOn: NoteOnEvent, noteOff: NoteOffEvent, header: Header) {\r\n\t\tprivateHeaderMap.set(this, header);\r\n\r\n\t\tthis.midi = noteOn.midi;\r\n\r\n\t\tthis.velocity = noteOn.velocity;\r\n\r\n\t\tthis.noteOffVelocity = noteOff.velocity;\r\n\r\n\t\tthis.ticks = noteOn.ticks;\r\n\r\n\t\tthis.durationTicks = noteOff.ticks - noteOn.ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * The note name and octave in scientific pitch notation, e.g. \"C4\".\r\n\t */\r\n\tget name(): string {\r\n\t\treturn midiToPitch(this.midi);\r\n\t}\r\n\r\n\tset name(n: string) {\r\n\t\tthis.midi = pitchToMidi(n);\r\n\t}\r\n\r\n\t/**\r\n\t * The notes octave number.\r\n\t */\r\n\tget octave(): number {\r\n\t\treturn Math.floor(this.midi / 12) - 1;\r\n\t}\r\n\r\n\tset octave(o: number) {\r\n\t\tconst diff = o - this.octave;\r\n\t\tthis.midi += diff * 12;\r\n\t}\r\n\r\n\t/**\r\n\t * The pitch class name. e.g. \"A\".\r\n\t */\r\n\tget pitch(): string {\r\n\t\treturn midiToPitchClass(this.midi);\r\n\t}\r\n\r\n\tset pitch(p: string) {\r\n\t\tthis.midi = 12 * (this.octave + 1) + pitchClassToMidi(p);\r\n\t}\r\n\r\n\t/**\r\n\t * The duration of the segment in seconds.\r\n\t */\r\n\tget duration(): number {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\treturn header.ticksToSeconds(this.ticks + this.durationTicks) - header.ticksToSeconds(this.ticks);\r\n\t}\r\n\r\n\tset duration(d: number) {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\tconst noteEndTicks = header.secondsToTicks(this.time + d);\r\n\t\tthis.durationTicks = noteEndTicks - this.ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * The time of the event in seconds.\r\n\t */\r\n\tget time(): number {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\treturn header.ticksToSeconds(this.ticks);\r\n\t}\r\n\r\n\tset time(t: number) {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\tthis.ticks = header.secondsToTicks(t);\r\n\t}\r\n\r\n\t/**\r\n\t * The number of measures (and partial measures) to this beat.\r\n\t * Takes into account time signature changes.\r\n\t * @readonly\r\n\t */\r\n\tget bars(): number {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\treturn header.ticksToMeasures(this.ticks);\r\n\t}\r\n\r\n\ttoJSON(): NoteJSON {\r\n\t\treturn {\r\n\t\t\tduration: this.duration,\r\n\t\t\tdurationTicks: this.durationTicks,\r\n\t\t\tmidi: this.midi,\r\n\t\t\tname: this.name,\r\n\t\t\tticks: this.ticks,\r\n\t\t\ttime: this.time,\r\n\t\t\tvelocity: this.velocity,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport interface NoteJSON {\r\n\ttime: number;\r\n\tmidi: number;\r\n\tname: string;\r\n\tvelocity: number;\r\n\tduration: number;\r\n\tticks: number;\r\n\tdurationTicks: number;\r\n}\r\n\r\nexport interface NoteOnEvent {\r\n\tticks: number;\r\n\tvelocity: number;\r\n\tmidi: number;\r\n}\r\n\r\nexport interface NoteOffEvent {\r\n\tticks: number;\r\n\tvelocity: number;\r\n}\r\n\r\nexport interface NoteInterface {\r\n\ttime: number;\r\n\tticks: number;\r\n\tduration: number;\r\n\tdurationTicks: number;\r\n\tmidi: number;\r\n\tpitch: string;\r\n\toctave: number;\r\n\tname: string;\r\n\tnoteOffVelocity: number;\r\n\tvelocity: number;\r\n}\r\n\r\ntype PitchDescription = {\r\n\tname: string;\r\n} | {\r\n\tpitch: string;\r\n\toctave: number;\r\n} | {\r\n\tmidi: number;\r\n}\r\n\r\ntype VelocityDescription = {\r\n\tvelocity?: number;\r\n\tnoteOffVelocity?: number;\r\n}\r\n\r\ntype TimeDescription = {\r\n\ttime: number;\r\n\tduration?: number;\r\n} | {\r\n\tticks: number;\r\n\tdurationTicks?: number;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport type NoteConstructorInterface = PitchDescription & VelocityDescription & TimeDescription\r\n", "import type {\r\n\tMidiControllerEvent,\r\n\tMidiEndOfTrackEvent,\r\n\tMidiEvent,\r\n\tMidiNoteOffEvent, MidiNoteOnEvent,\r\n\tMidiPitchBendEvent, MidiTrackNameEvent\r\n} from \"midi-file\";\r\n\r\n// Used to add `absoluteTime` property to 'MidiEvent's.\r\ntype WithAbsoluteTime = { absoluteTime: number; };\r\n\r\nimport { insert } from \"./BinarySearch\";\r\nimport { ControlChange, ControlChangeInterface } from \"./ControlChange\";\r\nimport { ControlChangesJSON, createControlChanges } from \"./ControlChanges\";\r\nimport { PitchBend, PitchBendInterface, PitchBendJSON } from \"./PitchBend\";\r\n\r\nimport { Header } from \"./Header\";\r\nimport { Instrument, InstrumentJSON } from \"./Instrument\";\r\nimport { Note, NoteConstructorInterface, NoteJSON } from \"./Note\";\r\n\r\nconst privateHeaderMap = new WeakMap<Track, Header>();\r\n\r\n/**\r\n * A Track is a collection of 'notes' and 'controlChanges'.\r\n */\r\nexport class Track {\r\n\t/**\r\n\t * The name of the track.\r\n\t */\r\n\tname = \"\";\r\n\r\n\t/**\r\n\t * The instrument associated with the track.\r\n\t */\r\n\tinstrument: Instrument;\r\n\r\n\t/**\r\n\t * The track's note events.\r\n\t */\r\n\tnotes: Note[] = [];\r\n\r\n\t/**\r\n\t * The channel number of the track. Applies this channel\r\n\t * to all events associated with the channel.\r\n\t */\r\n\tchannel: number;\r\n\r\n\t/**\r\n\t * The control change events.\r\n\t */\r\n\tcontrolChanges = createControlChanges();\r\n\r\n\t/**\r\n\t * The end of track event (if it exists) in ticks.\r\n\t */\r\n\tendOfTrackTicks?: number;\r\n\r\n\t/**\r\n\t * The pitch bend events.\r\n\t */\r\n\tpitchBends: PitchBend[] = [];\r\n\r\n\tconstructor(trackData: MidiEvent[], header: Header) {\r\n\t\tprivateHeaderMap.set(this, header);\r\n\r\n\t\tif (trackData) {\r\n\t\t\t// Get the name of the track.\r\n\t\t\tconst nameEvent = trackData.find(\r\n\t\t\t\t(e) => e.type === \"trackName\"\r\n\t\t\t) as MidiTrackNameEvent;\r\n\r\n\t\t\t// Set empty name if 'trackName' event isn't found.\r\n\t\t\tthis.name = nameEvent ? nameEvent.text : \"\";\r\n\t\t}\r\n\r\n\t\tthis.instrument = new Instrument(trackData, this);\r\n\r\n\t\t// Defaults to 0.\r\n\t\tthis.channel = 0;\r\n\r\n\t\tif (trackData) {\r\n\t\t\tconst noteOns = trackData.filter(\r\n\t\t\t\t(event) => event.type === \"noteOn\"\r\n\t\t\t) as (MidiNoteOnEvent & WithAbsoluteTime)[];\r\n\r\n\t\t\tconst noteOffs = trackData.filter(\r\n\t\t\t\t(event) => event.type === \"noteOff\"\r\n\t\t\t) as (MidiNoteOffEvent & WithAbsoluteTime)[];\r\n\r\n\t\t\twhile (noteOns.length) {\r\n\t\t\t\tconst currentNote = noteOns.shift();\r\n\r\n\t\t\t\t// Set the channel based on the note.\r\n\t\t\t\tthis.channel = currentNote.channel;\r\n\r\n\t\t\t\t// Find the corresponding note off.\r\n\t\t\t\tconst offIndex = noteOffs.findIndex(\r\n\t\t\t\t\t(note) =>\r\n\t\t\t\t\t\tnote.noteNumber === currentNote.noteNumber &&\r\n\t\t\t\t\t\tnote.absoluteTime >= currentNote.absoluteTime\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (offIndex !== -1) {\r\n\t\t\t\t\t// Once it's got the note off, add it.\r\n\t\t\t\t\tconst noteOff = noteOffs.splice(offIndex, 1)[0];\r\n\r\n\t\t\t\t\tthis.addNote({\r\n\t\t\t\t\t\tdurationTicks:\r\n\t\t\t\t\t\t\tnoteOff.absoluteTime - currentNote.absoluteTime,\r\n\t\t\t\t\t\tmidi: currentNote.noteNumber,\r\n\t\t\t\t\t\tnoteOffVelocity: noteOff.velocity / 127,\r\n\t\t\t\t\t\tticks: currentNote.absoluteTime,\r\n\t\t\t\t\t\tvelocity: currentNote.velocity / 127,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst controlChanges = trackData.filter(\r\n\t\t\t\t(event) => event.type === \"controller\"\r\n\t\t\t) as (MidiControllerEvent & WithAbsoluteTime)[];\r\n\t\t\tcontrolChanges.forEach((event) => {\r\n\t\t\t\tthis.addCC({\r\n\t\t\t\t\tnumber: event.controllerType,\r\n\t\t\t\t\tticks: event.absoluteTime,\r\n\t\t\t\t\tvalue: event.value / 127,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tconst pitchBends = trackData.filter(\r\n\t\t\t\t(event) => event.type === \"pitchBend\"\r\n\t\t\t) as (MidiPitchBendEvent & WithAbsoluteTime)[];\r\n\t\t\tpitchBends.forEach((event) => {\r\n\t\t\t\tthis.addPitchBend({\r\n\t\t\t\t\tticks: event.absoluteTime,\r\n\t\t\t\t\t// Scale the value between -2^13 to 2^13 to -2 to 2.\r\n\t\t\t\t\tvalue: event.value / Math.pow(2, 13),\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tconst endOfTrackEvent:\r\n\t\t\t| (MidiEndOfTrackEvent & WithAbsoluteTime)\r\n\t\t\t| undefined = trackData.find(\r\n\t\t\t\t(event): event is (MidiEndOfTrackEvent & WithAbsoluteTime) =>\r\n\t\t\t\t\tevent.type === \"endOfTrack\"\r\n\t\t\t);\r\n\r\n\t\t\tthis.endOfTrackTicks =\r\n\t\t\t\tendOfTrackEvent !== undefined\r\n\t\t\t\t\t? endOfTrackEvent.absoluteTime\r\n\t\t\t\t\t: undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add a note to the notes array.\r\n\t * @param props The note properties to add.\r\n\t */\r\n\taddNote(props: NoteConstructorInterface): this {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\tconst note = new Note(\r\n\t\t\t{\r\n\t\t\t\tmidi: 0,\r\n\t\t\t\tticks: 0,\r\n\t\t\t\tvelocity: 1,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tticks: 0,\r\n\t\t\t\tvelocity: 0,\r\n\t\t\t},\r\n\t\t\theader\r\n\t\t);\r\n\r\n\t\tObject.assign(note, props);\r\n\t\tinsert(this.notes, note, \"ticks\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Add a control change to the track.\r\n\t * @param props\r\n\t */\r\n\taddCC(\r\n\t\tprops:\r\n\t\t| Omit<ControlChangeInterface, \"ticks\">\r\n\t\t| Omit<ControlChangeInterface, \"time\">\r\n\t): this {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\tconst cc = new ControlChange(\r\n\t\t\t{\r\n\t\t\t\tcontrollerType: props.number,\r\n\t\t\t},\r\n\t\t\theader\r\n\t\t);\r\n\t\tdelete props.number;\r\n\t\tObject.assign(cc, props);\r\n\t\tif (!Array.isArray(this.controlChanges[cc.number])) {\r\n\t\t\tthis.controlChanges[cc.number] = [];\r\n\t\t}\r\n\t\tinsert(this.controlChanges[cc.number], cc, \"ticks\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Add a control change to the track.\r\n\t */\r\n\taddPitchBend(\r\n\t\tprops:\r\n\t\t| Omit<PitchBendInterface, \"ticks\">\r\n\t\t| Omit<PitchBendInterface, \"time\">\r\n\t): this {\r\n\t\tconst header = privateHeaderMap.get(this);\r\n\t\tconst pb = new PitchBend({}, header);\r\n\t\tObject.assign(pb, props);\r\n\t\tinsert(this.pitchBends, pb, \"ticks\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * The end time of the last event in the track.\r\n\t */\r\n\tget duration(): number {\r\n\t\tif (!this.notes.length) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tlet maxDuration =\r\n\t\t\tthis.notes[this.notes.length - 1].time +\r\n\t\t\tthis.notes[this.notes.length - 1].duration;\r\n\r\n\t\tfor (let i = 0; i < this.notes.length - 1; i++) {\r\n\t\t\tconst duration = this.notes[i].time + this.notes[i].duration;\r\n\t\t\tif (maxDuration < duration) {\r\n\t\t\t\tmaxDuration = duration;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn maxDuration;\r\n\t}\r\n\r\n\t/**\r\n\t * The end time of the last event in the track in ticks.\r\n\t */\r\n\tget durationTicks(): number {\r\n\t\tif (!this.notes.length) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tlet maxDuration =\r\n\t\t\tthis.notes[this.notes.length - 1].ticks +\r\n\t\t\tthis.notes[this.notes.length - 1].durationTicks;\r\n\t\tfor (let i = 0; i < this.notes.length - 1; i++) {\r\n\t\t\tconst duration = this.notes[i].ticks + this.notes[i].durationTicks;\r\n\t\t\tif (maxDuration < duration) {\r\n\t\t\t\tmaxDuration = duration;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn maxDuration;\r\n\t}\r\n\r\n\t/**\r\n\t * Assign the JSON values to this track.\r\n\t */\r\n\tfromJSON(json: TrackJSON): void {\r\n\t\tthis.name = json.name;\r\n\t\tthis.channel = json.channel;\r\n\t\tthis.instrument = new Instrument(undefined, this);\r\n\t\tthis.instrument.fromJSON(json.instrument);\r\n\r\n\t\tif (json.endOfTrackTicks !== undefined) {\r\n\t\t\tthis.endOfTrackTicks = json.endOfTrackTicks;\r\n\t\t}\r\n\r\n\t\tfor (const number in json.controlChanges) {\r\n\t\t\tif (json.controlChanges[number]) {\r\n\t\t\t\tjson.controlChanges[number].forEach((cc) => {\r\n\t\t\t\t\tthis.addCC({\r\n\t\t\t\t\t\tnumber: cc.number,\r\n\t\t\t\t\t\tticks: cc.ticks,\r\n\t\t\t\t\t\tvalue: cc.value,\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tjson.notes.forEach((n) => {\r\n\t\t\tthis.addNote({\r\n\t\t\t\tdurationTicks: n.durationTicks,\r\n\t\t\t\tmidi: n.midi,\r\n\t\t\t\tticks: n.ticks,\r\n\t\t\t\tvelocity: n.velocity,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Convert the track into a JSON format.\r\n\t */\r\n\ttoJSON(): TrackJSON {\r\n\t\t// Convert all the CCs to JSON.\r\n\t\tconst controlChanges = {};\r\n\t\tfor (let i = 0; i < 127; i++) {\r\n\t\t\tif (this.controlChanges.hasOwnProperty(i)) {\r\n\t\t\t\tcontrolChanges[i] = this.controlChanges[i].map((c) =>\r\n\t\t\t\t\tc.toJSON()\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst json: TrackJSON = {\r\n\t\t\tchannel: this.channel,\r\n\t\t\tcontrolChanges,\r\n\t\t\tpitchBends: this.pitchBends.map((pb) => pb.toJSON()),\r\n\t\t\tinstrument: this.instrument.toJSON(),\r\n\t\t\tname: this.name,\r\n\t\t\tnotes: this.notes.map((n) => n.toJSON()),\r\n\t\t};\r\n\r\n\t\tif (this.endOfTrackTicks !== undefined) {\r\n\t\t\tjson.endOfTrackTicks = this.endOfTrackTicks;\r\n\t\t}\r\n\r\n\t\treturn json;\r\n\t}\r\n}\r\n\r\nexport interface TrackJSON {\r\n\tname: string;\r\n\tnotes: NoteJSON[];\r\n\tchannel: number;\r\n\tinstrument: InstrumentJSON;\r\n\tcontrolChanges: ControlChangesJSON;\r\n\tpitchBends: PitchBendJSON[];\r\n\tendOfTrackTicks?: number;\r\n}\r\n", "/**\n * Pick the value from an array.\n */\nexport type PickValue<T> = T extends ReadonlyArray<any>\n  ? {\n      [K in Extract<keyof T, number>]: PickValue<T[K]>;\n    }[number]\n  : T;\n\n/**\n * Flatten an `ArrayLike` object in TypeScript.\n */\nexport type FlatArray<T extends ArrayLike<any>> = Array<PickValue<T[number]>>;\n\n/**\n * Flatten an array indefinitely.\n */\nexport function flatten<T extends ArrayLike<any>>(array: T): FlatArray<T> {\n  const result: FlatArray<T> = [];\n  $flatten<T>(array, result);\n  return result;\n}\n\n/**\n * Internal flatten function recursively passes `result`.\n */\nfunction $flatten<T extends ArrayLike<any>>(\n  array: T,\n  result: FlatArray<T>\n): void {\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n\n    if (Array.isArray(value)) {\n      $flatten(value as any, result);\n    } else {\n      result.push(value);\n    }\n  }\n}\n", "import { writeMidi } from \"midi-file\";\r\n\r\nimport type {\r\n\tMidiControllerEvent, MidiData, MidiEndOfTrackEvent,\r\n\tMidiEvent, MidiKeySignatureEvent,\r\n\tMidiNoteOffEvent, MidiNoteOnEvent, MidiPitchBendEvent,\r\n\tMidiProgramChangeEvent, MidiSetTempoEvent, MidiTextEvent,\r\n\tMidiTimeSignatureEvent, MidiTrackNameEvent\r\n} from \"midi-file\";\r\n\r\nimport { KeySignatureEvent, keySignatureKeys, MetaEvent, TempoEvent, TimeSignatureEvent } from \"./Header\";\r\nimport { ControlChange } from \"./ControlChange\";\r\nimport { PitchBend } from \"./PitchBend\";\r\nimport { Midi } from \"./Midi\";\r\nimport { Note } from \"./Note\";\r\nimport { Track } from \"./Track\";\r\n\r\nimport { flatten } from \"array-flatten\";\r\n\r\n/** Used to add `absoluteTime` property. */\r\ntype WithAbsoluteTime = { absoluteTime: number };\r\n\r\nfunction encodeNote(note: Note, channel: number): [\r\n\t(MidiNoteOnEvent & WithAbsoluteTime),\r\n\t(MidiNoteOffEvent & WithAbsoluteTime)\r\n] {\r\n\treturn [{\r\n\t\tabsoluteTime: note.ticks,\r\n\t\tchannel,\r\n\t\tdeltaTime: 0,\r\n\t\tnoteNumber: note.midi,\r\n\t\ttype: \"noteOn\",\r\n\t\tvelocity: Math.floor(note.velocity * 127),\r\n\t},\r\n\t{\r\n\t\tabsoluteTime: note.ticks + note.durationTicks,\r\n\t\tchannel,\r\n\t\tdeltaTime: 0,\r\n\t\tnoteNumber: note.midi,\r\n\t\ttype: \"noteOff\",\r\n\t\tvelocity: Math.floor(note.noteOffVelocity * 127),\r\n\t}];\r\n}\r\n\r\nfunction encodeNotes(track: Track): Array<MidiNoteOnEvent | MidiNoteOffEvent> {\r\n\treturn flatten(track.notes.map(note => encodeNote(note, track.channel))) as unknown as Array<MidiNoteOnEvent | MidiNoteOffEvent>;\r\n}\r\n\r\nfunction encodeControlChange(\r\n\tcc: ControlChange,\r\n\tchannel: number\r\n): (MidiControllerEvent & WithAbsoluteTime) {\r\n\treturn {\r\n\t\tabsoluteTime: cc.ticks,\r\n\t\tchannel,\r\n\t\tcontrollerType: cc.number,\r\n\t\tdeltaTime: 0,\r\n\t\ttype: \"controller\",\r\n\t\tvalue: Math.floor(cc.value * 127),\r\n\t};\r\n}\r\n\r\nfunction encodeControlChanges(track: Track): MidiControllerEvent[] {\r\n\tconst controlChanges: MidiControllerEvent[] = [];\r\n\tfor (let i = 0; i < 127; i++) {\r\n\t\tif (track.controlChanges.hasOwnProperty(i)) {\r\n\t\t\ttrack.controlChanges[i].forEach((cc: ControlChange) => {\r\n\t\t\t\tcontrolChanges.push(encodeControlChange(cc, track.channel));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\treturn controlChanges;\r\n}\r\n\r\nfunction encodePitchBend(\r\n\tpb: PitchBend,\r\n\tchannel: number\r\n): (MidiPitchBendEvent & WithAbsoluteTime) {\r\n\treturn {\r\n\t\tabsoluteTime: pb.ticks,\r\n\t\tchannel,\r\n\t\tdeltaTime: 0,\r\n\t\ttype: \"pitchBend\",\r\n\t\tvalue: pb.value,\r\n\t};\r\n}\r\n\r\nfunction encodePitchBends(track: Track): MidiPitchBendEvent[] {\r\n\tconst pitchBends: MidiPitchBendEvent[] = [];\r\n\ttrack.pitchBends.forEach((pb: PitchBend) => {\r\n\t\tpitchBends.push(encodePitchBend(pb, track.channel));\r\n\t});\t\r\n\treturn pitchBends;\r\n}\r\n\r\nfunction encodeInstrument(track: Track): (MidiProgramChangeEvent & WithAbsoluteTime) {\r\n\treturn {\r\n\t\tabsoluteTime: 0,\r\n\t\tchannel: track.channel,\r\n\t\tdeltaTime: 0,\r\n\t\tprogramNumber: track.instrument.number,\r\n\t\ttype: \"programChange\",\r\n\t};\r\n}\r\n\r\nfunction encodeTrackName(name: string): (MidiTrackNameEvent & WithAbsoluteTime) {\r\n\treturn {\r\n\t\tabsoluteTime: 0,\r\n\t\tdeltaTime: 0,\r\n\t\tmeta: true,\r\n\t\ttext: name,\r\n\t\ttype: \"trackName\",\r\n\t};\r\n}\r\n\r\nfunction encodeTempo(tempo: TempoEvent): (MidiSetTempoEvent & WithAbsoluteTime) {\r\n\treturn {\r\n\t\tabsoluteTime: tempo.ticks,\r\n\t\tdeltaTime: 0,\r\n\t\tmeta: true,\r\n\t\tmicrosecondsPerBeat: Math.floor(60000000 / tempo.bpm),\r\n\t\ttype: \"setTempo\",\r\n\t};\r\n}\r\n\r\nfunction encodeTimeSignature(timeSig: TimeSignatureEvent): (MidiTimeSignatureEvent & WithAbsoluteTime) {\r\n\treturn {\r\n\t\tabsoluteTime: timeSig.ticks,\r\n\t\tdeltaTime: 0,\r\n\t\tdenominator: timeSig.timeSignature[1],\r\n\t\tmeta: true,\r\n\t\tmetronome: 24,\r\n\t\tnumerator: timeSig.timeSignature[0],\r\n\t\tthirtyseconds: 8,\r\n\t\ttype: \"timeSignature\",\r\n\t};\r\n}\r\n\r\n// function encodeMeta(event: )\r\n\r\nfunction encodeKeySignature(keySig: KeySignatureEvent): (MidiKeySignatureEvent & WithAbsoluteTime) {\r\n\tconst keyIndex = keySignatureKeys.indexOf(keySig.key);\r\n\treturn {\r\n\t\tabsoluteTime: keySig.ticks,\r\n\t\tdeltaTime: 0,\r\n\t\tkey: keyIndex + 7,\r\n\t\tmeta: true,\r\n\t\tscale: keySig.scale === \"major\" ? 0 : 1,\r\n\t\ttype: \"keySignature\",\r\n\t};\r\n}\r\n\r\nfunction encodeText(\r\n\ttextEvent: (MetaEvent & { ticks: number; })\r\n): (MidiTextEvent & WithAbsoluteTime) {\r\n\treturn {\r\n\t\tabsoluteTime: textEvent.ticks,\r\n\t\tdeltaTime: 0,\r\n\t\tmeta: true,\r\n\t\ttext: textEvent.text,\r\n\t\ttype: textEvent.type,\r\n\t} as (MidiTextEvent & WithAbsoluteTime);\r\n}\r\n\r\n/**\r\n * Convert the MIDI object to an array.\r\n */\r\nexport function encode(midi: Midi): Uint8Array {\r\n\tconst midiData: MidiData = {\r\n\t\theader: {\r\n\t\t\tformat: 1,\r\n\t\t\tnumTracks: midi.tracks.length + 1,\r\n\t\t\tticksPerBeat: midi.header.ppq,\r\n\t\t},\r\n\t\ttracks: [\r\n\t\t\t[\r\n\t\t\t\t// The name data.\r\n\t\t\t\t{\r\n\t\t\t\t\tabsoluteTime: 0,\r\n\t\t\t\t\tdeltaTime: 0,\r\n\t\t\t\t\tmeta: true,\r\n\t\t\t\t\ttext: midi.header.name,\r\n\t\t\t\t\ttype: \"trackName\",\r\n\t\t\t\t} as MidiTrackNameEvent,\r\n\t\t\t\t...midi.header.keySignatures.map(keySig => encodeKeySignature(keySig)),\r\n\t\t\t\t// and all the meta events (cloned for safety)\r\n\t\t\t\t...midi.header.meta.map(e => encodeText(e)),\r\n\t\t\t\t// the first track is all the tempo data\r\n\t\t\t\t...midi.header.tempos.map(tempo => encodeTempo(tempo)),\r\n\t\t\t\t// and the time signature data.\r\n\t\t\t\t...midi.header.timeSignatures.map(timeSig => encodeTimeSignature(timeSig)),\r\n\t\t\t],\r\n\t\t\t// The remaining tracks.\r\n\t\t\t...midi.tracks.map((track) => {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t// Add the name\r\n\t\t\t\t\tencodeTrackName(track.name),\r\n\t\t\t\t\t// the instrument\r\n\t\t\t\t\tencodeInstrument(track),\r\n\t\t\t\t\t// add the notes\r\n\t\t\t\t\t...encodeNotes(track),\r\n\t\t\t\t\t// and the control changes\r\n\t\t\t\t\t...encodeControlChanges(track),\r\n\t\t\t\t\t// and the pitch bends.\r\n\t\t\t\t\t...encodePitchBends(track)\r\n\t\t\t\t];\r\n\t\t\t}),\r\n\t\t],\r\n\t};\r\n\r\n\t// Sort and set `deltaTime` of all of the tracks.\r\n\tmidiData.tracks = midiData.tracks.map((track: (MidiEvent & WithAbsoluteTime)[]) => {\r\n\t\ttrack = track.sort((a, b) => a.absoluteTime - b.absoluteTime);\r\n\t\t\r\n\t\tlet lastTime = 0;\r\n\t\ttrack.forEach(note => {\r\n\t\t\tnote.deltaTime = note.absoluteTime - lastTime;\r\n\t\t\tlastTime = note.absoluteTime;\r\n\t\t\tdelete note.absoluteTime;\r\n\t\t});\r\n\r\n\t\t// End of track.\r\n\t\ttrack.push({\r\n\t\t\tdeltaTime: 0,\r\n\t\t\tmeta: true,\r\n\t\t\ttype: \"endOfTrack\",\r\n\t\t} as (MidiEndOfTrackEvent & WithAbsoluteTime));\r\n\t\treturn track;\r\n\t});\r\n\r\n\t// Rreturn `midiData`.\r\n\treturn new Uint8Array(writeMidi(midiData));\r\n}\r\n", "import type {\r\n\tMidiData,\r\n\tMidiEvent\r\n} from \"midi-file\";\r\n\r\nimport { parseMidi } from \"midi-file\";\r\n\r\nimport { Header, HeaderJSON } from \"./Header\";\r\nimport { Track, TrackJSON } from \"./Track\";\r\nimport { encode } from \"./Encode\";\r\n\r\n/**\r\n * The main midi parsing class.\r\n */\r\nexport class Midi {\r\n\r\n\t/**\r\n\t * Download and parse the MIDI file. Returns a promise\r\n\t * which resolves to the generated MIDI file.\r\n\t * @param url The URL to fetch.\r\n\t */\r\n\tstatic async fromUrl(url: string): Promise<Midi> {\r\n\t\tconst response = await fetch(url);\r\n\t\tif (response.ok) {\r\n\t\t\tconst arrayBuffer = await response.arrayBuffer();\r\n\t\t\treturn new Midi(arrayBuffer);\r\n\t\t} else {\r\n\t\t\tthrow new Error(`Could not load '${url}'`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The header information, includes things like tempo and meta events.\r\n\t */\r\n\theader: Header;\r\n\r\n\t/**\r\n\t * The midi tracks.\r\n\t */\r\n\ttracks: Track[];\r\n\r\n\t/**\r\n\t * Parse the midi data\r\n\t */\r\n\tconstructor(midiArray?: (ArrayLike<number> | ArrayBuffer)) {\r\n\t\t// Parse the MIDI data if there is any.\r\n\t\tlet midiData: (MidiData | null) = null;\r\n\t\tif (midiArray) {\r\n\t\t\t// Transform midiArray to ArrayLike<number>\r\n\t\t\t// only if it's an ArrayBuffer.\r\n\t\t\tconst midiArrayLike: ArrayLike<number> = midiArray instanceof ArrayBuffer\r\n\t\t\t\t? new Uint8Array(midiArray)\r\n\t\t\t\t: midiArray;\r\n\r\n\t\t\t// Parse MIDI data.\r\n\t\t\tmidiData = parseMidi(midiArrayLike);\r\n\r\n\t\t\t// Add the absolute times to each of the tracks.\r\n\t\t\tmidiData.tracks.forEach(track => {\r\n\t\t\t\tlet currentTicks = 0;\r\n\r\n\t\t\t\ttrack.forEach((event: MidiEvent & { absoluteTime: number; }) => {\r\n\t\t\t\t\tcurrentTicks += event.deltaTime;\r\n\t\t\t\t\tevent.absoluteTime = currentTicks;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\t// Ensure at most one instrument per track.\r\n\t\t\tmidiData.tracks = splitTracks(midiData.tracks);\r\n\t\t}\r\n\r\n\t\tthis.header = new Header(midiData);\r\n\t\tthis.tracks = [];\r\n\r\n\t\t// Parse MIDI data.\r\n\t\tif (midiArray) {\r\n\t\t\t// Format 0, everything is on the same track.\r\n\t\t\tthis.tracks = midiData.tracks.map(trackData => new Track(trackData, this.header));\r\n\r\n\t\t\t// If it's format 1 and there are no notes on the first track, remove it.\r\n\t\t\tif (midiData.header.format === 1 && this.tracks[0].duration === 0) {\r\n\t\t\t\tthis.tracks.shift();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The name of the midi file, taken from the first track.\r\n\t */\r\n\tget name(): string {\r\n\t\treturn this.header.name;\r\n\t}\r\n\r\n\tset name(n) {\r\n\t\tthis.header.name = n;\r\n\t}\r\n\r\n\t/**\r\n\t * The total length of the file in seconds.\r\n\t */\r\n\tget duration(): number {\r\n\t\t// Get the max of the last note of all the tracks.\r\n\t\tconst durations = this.tracks.map(t => t.duration);\r\n\t\treturn Math.max(...durations);\r\n\t}\r\n\r\n\t/**\r\n\t * The total length of the file in ticks.\r\n\t */\r\n\tget durationTicks(): number {\r\n\t\t// Get the max of the last note of all the tracks.\r\n\t\tconst durationTicks = this.tracks.map(t => t.durationTicks);\r\n\t\treturn Math.max(...durationTicks);\r\n\t}\r\n\r\n\t/**\r\n\t * Add a track to the MIDI file.\r\n\t */\r\n\taddTrack(): Track {\r\n\t\tconst track = new Track(undefined, this.header);\r\n\t\tthis.tracks.push(track);\r\n\r\n\t\treturn track;\r\n\t}\r\n\r\n\t/**\r\n\t * Encode the MIDI as a Uint8Array.\r\n\t */\r\n\ttoArray(): Uint8Array {\r\n\t\treturn encode(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Convert the MIDI object to JSON.\r\n\t */\r\n\ttoJSON(): MidiJSON {\r\n\t\treturn {\r\n\t\t\theader: this.header.toJSON(),\r\n\t\t\ttracks: this.tracks.map(track => track.toJSON()),\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Parse a JSON representation of the object. Will overwrite the current\r\n\t * tracks and header.\r\n\t */\r\n\tfromJSON(json: MidiJSON): void {\r\n\t\tthis.header = new Header();\r\n\t\tthis.header.fromJSON(json.header);\r\n\t\tthis.tracks = json.tracks.map(trackJSON => {\r\n\t\t\tconst track = new Track(undefined, this.header);\r\n\t\t\ttrack.fromJSON(trackJSON);\r\n\r\n\t\t\treturn track;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Clone the entire object MIDI object.\r\n\t */\r\n\tclone(): Midi {\r\n\t\tconst midi = new Midi();\r\n\t\tmidi.fromJSON(this.toJSON());\r\n\r\n\t\treturn midi;\r\n\t}\r\n}\r\n\r\n/**\r\n * The MIDI data in JSON format.\r\n */\r\nexport interface MidiJSON {\r\n\theader: HeaderJSON;\r\n\ttracks: TrackJSON[];\r\n}\r\n\r\nexport { TrackJSON, Track } from \"./Track\";\r\nexport { HeaderJSON, Header } from \"./Header\";\r\n\r\n/**\r\n * Given a list of MIDI tracks, make sure that each channel corresponds to at\r\n * most one channel and at most one instrument. This means splitting up tracks\r\n * that contain more than one channel or instrument.\r\n */\r\nfunction splitTracks(tracks: Array<MidiEvent[]>): Array<MidiEvent[]> {\r\n\tconst newTracks = [];\r\n\r\n\tfor (let i = 0; i < tracks.length; i++) {\r\n\t\tconst defaultTrack = newTracks.length;\r\n\t\t// a map from [program, channel] tuples to new track numbers\r\n\t\tconst trackMap = new Map<string, number>();\r\n\t\t// a map from channel numbers to current program numbers\r\n\t\tconst currentProgram = Array(16).fill(0) as Array<number>;\r\n\r\n\t\tfor (const event of tracks[i]) {\r\n\t\t\tlet targetTrack = defaultTrack;\r\n\r\n\t\t\t// If the event has a channel, we need to find that channel's current\r\n\t\t\t// program number and the appropriate track for this [program, channel]\r\n\t\t\t// pair.\r\n\t\t\tconst channel = (event as (MidiEvent & { channel?: number })).channel;\r\n\t\t\tif (channel !== undefined) {\r\n\t\t\t\tif (event.type === \"programChange\") {\r\n\t\t\t\t\tcurrentProgram[channel] = event.programNumber;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst program = currentProgram[channel];\r\n\t\t\t\tconst trackKey = `${program} ${channel}`;\r\n\t\t\t\t\r\n\t\t\t\tif (trackMap.has(trackKey)) {\r\n\t\t\t\t\ttargetTrack = trackMap.get(trackKey);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttargetTrack = defaultTrack + trackMap.size;\r\n\t\t\t\t\ttrackMap.set(trackKey, targetTrack);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!newTracks[targetTrack]) {\r\n\t\t\t\tnewTracks.push([]);\r\n\t\t\t}\r\n\r\n\t\t\tnewTracks[targetTrack].push(event);\r\n\t\t}\r\n\t}\r\n\r\n\treturn newTracks;\r\n}\r\n"],
  "mappings": "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",
  "names": ["event", "Header", "ControlChange", "PitchBend", "Instrument", "Note", "Track", "Midi"]
}
